variables:
# variable de grupos de fluid
- group: Fluid  
# Grupo de variables donde se encuentran las imagenes estables a usar como base en el dockerfile
- group: docker_images  
# Ruta del repositorio donde se encuentra el dockerfile ejemplo.. '$(Build.Repository.LocalPath)/Dockerfile'
- name: dockerFilePath
  value: ''
# Nombre que tendra la imagen al momento de ser construida
- name: imageName
  value: ''
# Tag que tendra la imagen al momento de ser construida
- name: imageTag
  value: ''
# ServiceConnection que usara para descargar la imagen base de jfrog para el dockerfile, y posteriormente construir la imagen 
- name: dockerRegistryConnection
  value: 'docker_imagebase'
# Ruta donde colocara la imagen que se guardo mediante tar ejemplo..  $(Build.Repository.LocalPath)
- name: dockerSavePath
  value: ''
# Propiedad del sonarQube para indicar el directorio a analizar
- name: sonarSources
  value: 'src' 
# propiedad de sonarQube para indicar los directorios a excluir en el an치lisis
- name: sonarExclusions
  value: 'node_modules/**,**/*.bin, test/**, coverage/**, resources/**, mocks/**, src/utils/schemas/**'
# propiedad de sonarQube para indicar el directorio donde se encontrara el reporte de covertura
- name: sonarCoveragePaths 
  value: 'coverage/lcov.info'
# 1=proyecto nuevo en sonarQube y 0=para actualizar una rama nueva del proyecto existente en sonarQube
- name: sonarCreateMaster
  value: '0'  
# Nombre del service connection para tarea de sonarQube
- name: sonarQubeServiceEndpoint 
  value: 'SonarLts' 
# Nombre del proyecto en SonarQube
- name: sonarProjectName  
  value: '$(Build.Repository.Name)' 
# nombre del script de pruebas unitarias
- name: unitTestCommand
  value: 'npm test' 
# js= javascript y tsc= typescript
- name: appType
  value: 'tsc' 
# versi칩n que se descargar치 en el agente temporalmente, si no se agrega valor utiliza la versi칩n por defecto del agente
- name: versionNode
  value: '20' 
# id de proyecto en fluid asserts
- name: idfluid
  value: $(??)
# secretKey de proyecto en fluid asserts
- name: secretfluid
  value: $(??)

resources:
  repositories:
    - repository: template
      type: git
      name: DevOps/_git/templates-yaml
      ref: 'refs/heads/master' # indicamos la rama que apuntamos en el repositorios template-yaml, siempre debemos apuntar a master
trigger:
  - trunk
  - feature/*
  
name: $(date:yyyyMMdd)$(rev:.r)
stages:
- stage: trunk
  variables:
  - group: produccion
  - group: Artifactory-produccion
  jobs:
  - template: prueba_fluid_sast.yml@template
    parameters:
      groupfluid: ${{variables.groupfluid}}
  - job: CI
    dependsOn: Pruebas_Sast
    condition: succeeded()
    pool:
      name: Docker-Agents
    workspace:
      clean: all
    steps:
    - template: build_PYTHON_v1.yml@template #ref de template en otro repository
      parameters:
        versionPython: ${{variables.versionPython}}
        sonarCoveragePaths: ${{variables.sonarCoveragePaths}}
        sonarExclusions: ${{variables.sonarExclusions}}
        sonarSources: ${{variables.sonarSources}}
        sonarQubeServiceEndpoint: ${{variables.sonarQubeServiceEndpoint}}
        sonarProjectName: ${{variables.sonarProjectName}}
        unitTestCommand: ${{variables.unitTestCommand}}
        path_dependencies_file: ${{variables.path_dependencies_file}}
        sonarTest: ${{variables.sonarTest}}
    - bash: |
        npm run build
      displayName: '.ts'
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: 'tar'
        archiveFile: '$(System.DefaultWorkingDirectory)/$(Build.BuildId).tar.gz'
        replaceExistingArchive: true
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(System.DefaultWorkingDirectory)/$(Build.BuildId).tar.gz'
        artifactName: drop